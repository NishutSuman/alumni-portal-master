// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String
  isEmailVerified   Boolean  @default(false)
  emailVerifyToken  String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  isActive          Boolean  @default(true)
  deactivatedAt     DateTime?
  
  // Basic Profile Information
  fullName          String
  dateOfBirth       DateTime?
  batch             Int
  bio               String?
  profileImage      String?
  employmentStatus  EmploymentStatus @default(OPEN_TO_WORK)
  
  // Contact Information
  whatsappNumber    String?
  alternateNumber   String?
  
  // Social Links
  linkedinUrl       String?
  instagramUrl      String?
  facebookUrl       String?
  twitterUrl        String?
  youtubeUrl        String?
  portfolioUrl      String?
  
  // Privacy Settings
  isProfilePublic   Boolean  @default(true)
  showEmail         Boolean  @default(false)
  showPhone         Boolean  @default(false)
  
  // Role and Permissions
  role              UserRole @default(USER)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  transactions      Transaction[]
  notifications     Notification[]
  activityLogs      ActivityLog[]
  auditLogs         AuditLog[] @relation("AuditActor")
  batchAdminOf      Batch[] @relation("BatchAdmin")
  photoUploads      Photo[]
  albumsCreated     Album[] @relation("AlbumCreator")
  educationHistory  UserEducation[]
  workHistory       UserWorkExperience[]
  batch_            Batch   @relation("BatchMembers", fields: [batch], references: [year])
  addresses         UserAddress[]
  
  // Event Relations
  eventRegistrations    EventRegistration[]
  eventsCreated         Event[] @relation("EventCreator") 
  feedbackResponses     EventFeedbackResponse[]

  // Approval relations (reverse side)
  approvedPosts     Post[]  @relation("PostApprover")
  approvedTransactions Transaction[] @relation("TransactionApprover")
  
  @@index([batch])
  @@index([fullName])
  @@index([employmentStatus])
  @@index([isActive, isProfilePublic])
  @@map("users")
}

model UserAddress {
  id            String      @id @default(cuid())
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  postalCode    String
  country       String      @default("India")
  addressType   AddressType
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([userId, addressType])
  @@map("user_addresses")
}

model UserEducation {
  id            String   @id @default(cuid())
  course        String   // e.g., "XII", "B.Tech", "MBA"
  stream        String?  // e.g., "PCMB", "Computer Science", "Finance"
  institution   String   // School/College/University name
  fromYear      Int
  toYear        Int?     // null for ongoing
  isOngoing     Boolean  @default(false)
  description   String?  // Additional details
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([institution])
  @@index([fromYear, toYear])
  @@map("user_education")
}

model UserWorkExperience {
  id            String      @id @default(cuid())
  companyName   String
  jobRole       String
  companyType   CompanyType?
  workAddress   String?
  fromYear      Int
  toYear        Int?        // null for current job
  isCurrentJob  Boolean     @default(false)
  description   String?     // Job responsibilities, achievements
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([userId])
  @@index([companyName])
  @@index([fromYear, toYear])
  @@map("user_work_experience")
}

model Batch {
  id          String @id @default(cuid())
  year        Int    @unique
  name        String // e.g., "Class of 2020"
  description String?
  
  // Batch Statistics
  totalMembers Int   @default(0)
  
  // Batch Admins (2 per batch: 1 boy + 1 girl)
  admins      User[] @relation("BatchAdmin")
  
  // All members of this batch
  members     User[] @relation("BatchMembers")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([year])
  @@map("batches")
}

model Post {
  id          String      @id @default(cuid())
  title       String
  body        String      // Rich text content
  category    PostCategory
  heroImage   String?
  images      String[]    // Array of image URLs
  tags        String[]    // Array of user IDs mentioned
  allowComments Boolean @default(true)
  allowLikes    Boolean @default(true)
  isArchived  Boolean     @default(false)
  isPublished Boolean     @default(true)
  
  // Relations
  createdBy   String
  author      User        @relation(fields: [createdBy], references: [id])
  approvedBy  String?
  approver    User?       @relation("PostApprover", fields: [approvedBy], references: [id])
  linkedEventId String?
  linkedEvent Event?      @relation(fields: [linkedEventId], references: [id])
  
  comments    Comment[]
  likes       Like[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([createdBy])
  @@index([category])
  @@index([isPublished, isArchived])
  @@index([createdAt])
  @@map("posts")
}

model Comment {
  id            String    @id @default(cuid())
  content       String
  isEdited      Boolean   @default(false)
  
  // Relations
  postId        String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdBy     String
  author        User      @relation(fields: [createdBy], references: [id])
  
  // Nested replies
  parentId      String?
  parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[] @relation("CommentReplies")
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([postId])
  @@index([createdBy])
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  
  // Relations
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@unique([postId, userId])
  @@map("likes")
}


model Album {
  id          String   @id @default(cuid())
  name        String
  description String?
  coverImage  String?
  isArchived  Boolean  @default(false)
  
  // Relations
  createdBy   String
  creator     User     @relation("AlbumCreator", fields: [createdBy], references: [id])
  photos      Photo[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([createdBy])
  @@map("albums")
}

model Photo {
  id          String   @id @default(cuid())
  url         String
  caption     String?
  tags        String[] // Array of user IDs
  metadata    Json?    // Store EXIF data, file size, etc.
  
  // Relations
  albumId     String?
  album       Album?   @relation(fields: [albumId], references: [id])
  uploadedBy  String
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([uploadedBy])
  @@index([albumId])
  @@map("photos")
}

model Transaction {
  id            String           @id @default(cuid())
  type          TransactionType
  category      String           // e.g., "donation", "event_fee", "merchandise"
  amount        Decimal          @db.Decimal(10, 2)
  description   String
  referenceId   String?          // External payment reference
  receiptUrl    String?          // Upload receipt/invoice
  status        TransactionStatus @default(PENDING)
  
  // Relations
  userId        String?
  user          User?            @relation(fields: [userId], references: [id])
  approvedBy    String?
  approver      User?            @relation("TransactionApprover", fields: [approvedBy], references: [id])
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@index([userId])
  @@index([type, status])
  @@index([createdAt])
  @@map("transactions")
}

model Notification {
  id          String            @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  payload     Json?             // Additional data for the notification
  isRead      Boolean           @default(false)
  
  // Relations
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  
  createdAt   DateTime          @default(now())
  
  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

model ActivityLog {
  id          String   @id @default(cuid())
  action      String   // e.g., "login", "profile_update", "post_create"
  details     Json?    // Additional context
  ipAddress   String?
  userAgent   String?
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("activity_logs")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String   // e.g., "user_deactivate", "transaction_approve"
  entityType  String   // e.g., "User", "Transaction"
  entityId    String
  oldValues   Json?
  newValues   Json?
  reason      String?
  
  // Relations
  actorId     String
  actor       User     @relation("AuditActor", fields: [actorId], references: [id])
  
  createdAt   DateTime @default(now())
  
  @@index([actorId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Event Schemas Below

model EventCategory {
  id          String   @id @default(cuid())
  name        String   @unique // "MEETINGS", "SOCIAL", "CULTURAL", "WORKSHOP"
  description String?
  isActive    Boolean  @default(true)
  
  // Relations
  events      Event[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([name])
  @@index([isActive])
  @@map("event_categories")
}

model Event {
  id                String      @id @default(cuid())
  title             String
  description       String      @db.Text
  slug              String?     @unique // For SEO-friendly URLs
  
  // Category and dates
  categoryId        String
  category          EventCategory @relation(fields: [categoryId], references: [id])
  eventDate         DateTime
  startTime         String?     // Store as "HH:MM" format
  endTime           String?     // Store as "HH:MM" format
  registrationStartDate DateTime?
  registrationEndDate   DateTime?
  
  // Location and mode
  venue             String?
  meetingLink       String?
  maxCapacity       Int?
  eventMode         EventMode   @default(PHYSICAL)
  
  // Status
  status            EventStatus @default(DRAFT)
  
  // Feature flags
  hasRegistration   Boolean     @default(true)
  hasExternalLink   Boolean     @default(false)
  externalRegistrationLink String?
  hasCustomForm     Boolean     @default(false)
  hasMeals          Boolean     @default(false)
  hasGuests         Boolean     @default(false)
  hasDonations      Boolean     @default(false)
  hasMerchandise    Boolean     @default(false)
  hasPrizes         Boolean     @default(false)
  hasSponsors       Boolean     @default(false)
  hasOrganizers     Boolean     @default(false)
  
  // Modification settings
  allowFormModification Boolean  @default(true)
  formModificationDeadlineHours Int @default(24)
  
  // Fee structure
  registrationFee   Decimal     @default(0) @db.Decimal(10, 2)
  guestFee          Decimal     @default(0) @db.Decimal(10, 2)
  
  // Images and attachments
  heroImage         String?
  images            String[]    // Array of image URLs
  
  // Relations
  createdBy         String
  creator           User        @relation("EventCreator", fields: [createdBy], references: [id])
  
  sections          EventSection[]
  form              EventForm?
  merchandise       EventMerchandise[]
  registrations     EventRegistration[]
  feedbackForm      EventFeedbackForm?
  linkedPosts       Post[]      // Posts can be linked to events
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([categoryId])
  @@index([eventDate])
  @@index([status])
  @@index([createdBy])
  @@index([hasRegistration])
  @@map("events")
}

model EventSection {
  id          String            @id @default(cuid())
  eventId     String
  event       Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  sectionType EventSectionType
  title       String
  content     String            @db.Text
  orderIndex  Int               @default(0)
  isVisible   Boolean           @default(true)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([eventId, orderIndex])
  @@index([sectionType])
  @@map("event_sections")
}

model EventForm {
  id          String            @id @default(cuid())
  eventId     String            @unique
  event       Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  title       String            @default("Registration Form")
  description String?           @db.Text
  isActive    Boolean           @default(true)
  
  // Relations
  fields      EventFormField[]
  // responses   EventFormResponse[]
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@map("event_forms")
}

model EventFormField {
  id          String            @id @default(cuid())
  formId      String
  form        EventForm         @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  fieldName   String            // Unique within form
  fieldLabel  String
  fieldType   EventFormFieldType
  options     Json?             // For SELECT, RADIO, CHECKBOX
  isRequired  Boolean           @default(false)
  orderIndex  Int               @default(0)
  validation  Json?             // Custom validation rules
  
  // Relations
  responses   EventFormResponse[]
  guestResponses EventGuestFormResponse[]

  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@unique([formId, fieldName])
  @@index([formId, orderIndex])
  @@map("event_form_fields")
}

model EventMerchandise {
  id              String                    @id @default(cuid())
  eventId         String
  event           Event                     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  name            String
  description     String?                   @db.Text
  price           Decimal                   @db.Decimal(10, 2)
  images          String[]                  // Array of image URLs
  availableSizes  String[]                  // ["S", "M", "L", "XL", "XXL"]
  stockQuantity   Int?
  isActive        Boolean                   @default(true)
  orderIndex      Int                       @default(0)
  
  // Relations
  orders          EventMerchandiseOrder[]
  
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  
  @@index([eventId])
  @@index([isActive])
  @@map("event_merchandise")
}

model EventRegistration {
  id                      String                    @id @default(cuid())
  eventId                 String
  event                   Event                     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId                  String
  user                    User                      @relation(fields: [userId], references: [id])
  
  registrationDate        DateTime                  @default(now())
  status                  EventRegistrationStatus   @default(CONFIRMED)
  
  // Payment information
  totalAmount             Decimal                   @default(0) @db.Decimal(10, 2)
  registrationFeePaid     Decimal                   @default(0) @db.Decimal(10, 2)
  guestFeesPaid           Decimal                   @default(0) @db.Decimal(10, 2)
  merchandiseTotal        Decimal                   @default(0) @db.Decimal(10, 2)
  donationAmount          Decimal                   @default(0) @db.Decimal(10, 2)
  cancelledTodonation     Decimal                   @default(0) @db.Decimal(10, 2)
  paymentStatus           PaymentStatus             @default(PENDING)
  paymentReference        String?
  
  // Meal preferences
  mealPreference          MealPreference?
  
  // Guest information
  totalGuests             Int                       @default(0)
  activeGuests            Int                       @default(0)
  
  // Modification tracking
  lastModifiedAt          DateTime?
  modificationCount       Int                       @default(0)
  
  // Relations
  guests                  EventGuest[]
  formResponses           EventFormResponse[]
  merchandiseOrders       EventMerchandiseOrder[]
  
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  
  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@map("event_registrations")
}

model EventGuest {
  id              String                    @id @default(cuid())
  registrationId  String
  registration    EventRegistration         @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  
  name            String
  email           String?
  phone           String?
  mealPreference  MealPreference?
  feesPaid        Decimal                   @default(0) @db.Decimal(10, 2)
  status          GuestStatus               @default(ACTIVE)
  
  // Relations
  formResponses   EventGuestFormResponse[]
  
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  
  @@index([registrationId])
  @@index([status])
  @@map("event_guests")
}

model EventFormResponse {
  id              String            @id @default(cuid())
  registrationId  String
  registration    EventRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  fieldId         String
  field           EventFormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  response        String            @db.Text
  version         Int               @default(1) // For modification tracking
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([registrationId, fieldId])
  @@index([registrationId])
  @@map("event_form_responses")
}

model EventMerchandiseOrder {
  id              String                @id @default(cuid())
  registrationId  String
  registration    EventRegistration     @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  merchandiseId   String
  merchandise     EventMerchandise      @relation(fields: [merchandiseId], references: [id], onDelete: Cascade)
  
  quantity        Int
  selectedSize    String?
  unitPrice       Decimal               @db.Decimal(10, 2)
  totalPrice      Decimal               @db.Decimal(10, 2)
  
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  @@index([registrationId])
  @@index([merchandiseId])
  @@map("event_merchandise_orders")
}

model EventGuestFormResponse {
  id          String          @id @default(cuid())
  guestId     String
  guest       EventGuest      @relation(fields: [guestId], references: [id], onDelete: Cascade)
  fieldId     String
  field       EventFormField  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  response    String          @db.Text
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  @@unique([guestId, fieldId])
  @@map("event_guest_form_responses")
}

model EventFeedbackForm {
  id          String                    @id @default(cuid())
  eventId     String                    @unique
  event       Event                     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  title       String                    @default("Event Feedback")
  description String?                   @db.Text
  isActive    Boolean                   @default(true)
  
  // Relations
  fields      EventFeedbackField[]
  responses   EventFeedbackResponse[]
  
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  
  @@map("event_feedback_forms")
}

model EventFeedbackField {
  id                String                    @id @default(cuid())
  feedbackFormId    String
  feedbackForm      EventFeedbackForm         @relation(fields: [feedbackFormId], references: [id], onDelete: Cascade)
  
  fieldName         String
  fieldLabel        String
  fieldType         EventFormFieldType
  options           Json?
  isRequired        Boolean                   @default(false)
  orderIndex        Int                       @default(0)
  
  // Relations
  responses         EventFeedbackResponse[]
  
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  
  @@unique([feedbackFormId, fieldName])
  @@index([feedbackFormId, orderIndex])
  @@map("event_feedback_fields")
}

model EventFeedbackResponse {
  id                String                @id @default(cuid())
  feedbackFormId    String
  feedbackForm      EventFeedbackForm     @relation(fields: [feedbackFormId], references: [id], onDelete: Cascade)
  userId            String
  user              User                  @relation(fields: [userId], references: [id])
  fieldId           String
  field             EventFeedbackField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)  // Make sure this line exists
  
  response          String                @db.Text
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  @@unique([feedbackFormId, userId, fieldId])
  @@map("event_feedback_responses")
}



// Enums
enum UserRole {
  USER
  BATCH_ADMIN
  SUPER_ADMIN
}

enum PostCategory {
  MOM         // Minutes of Meeting
  STORY       // Alumni Story
  POST        // General Post
  NOTICE     // Official Notice
  ANNOUNCEMENT // Event Announcement
}

enum AttendeeStatus {
  PENDING
  CONFIRMED
  DECLINED
}

enum TransactionType {
  COLLECTION  // Money coming in (donations, fees)
  EXPENSE     // Money going out
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum NotificationType {
  MENTION
  COMMENT_REPLY
  POST_APPROVED
  EVENT_INVITATION
  PAYMENT_RECEIVED
  GENERAL
}

enum EmploymentStatus {
  WORKING
  STUDYING
  OPEN_TO_WORK
  ENTREPRENEUR
  RETIRED
}

enum CompanyType {
  GOVERNMENT
  PRIVATE
  STARTUP
  NGO
  FREELANCE
  SELF_EMPLOYED
}

enum AddressType {
  PERMANENT
  CURRENT
}

enum EventMode {
  PHYSICAL
  VIRTUAL
  HYBRID
}

enum EventStatus {
  DRAFT
  PUBLISHED
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  ONGOING
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum EventSectionType {
  SCHEDULE
  ORGANIZERS
  LOCATION
  PRIZES
  SPONSORS
  DONATIONS
  MERCHANDISE
  CUSTOM
}

enum EventFormFieldType {
  TEXT
  EMAIL
  PHONE
  TEXTAREA
  SELECT
  RADIO
  CHECKBOX
  RATING
}

enum EventRegistrationStatus {
  CONFIRMED
  CANCELLED
  WAITLIST
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum MealPreference {
  VEG
  NON_VEG
}

enum GuestStatus {
  ACTIVE
  CANCELLED
}